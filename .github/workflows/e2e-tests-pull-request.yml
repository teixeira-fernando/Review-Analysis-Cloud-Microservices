name: E2E Tests - Continuous Integration

on:
  pull_request:
    branches: ["main"]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      AWS_ACCESSKEY: ${{ secrets.AWS_ACCESSKEY }}
      AWS_SECRETKEY: ${{ secrets.AWS_SECRETKEY }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@cc4fc85e6b35bafd578d5ffbc76a5518407e1af0 # v4.2.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Run docker-compose
        run: docker compose up --build --abort-on-container-exit

      - name: Tear down Docker Compose
        run: docker compose down







#name: E2E Tests - Continuous Integration
#
#on:
#  pull_request:
#    branches: ["main"]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#      attestations: write
#      id-token: write
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          cache: gradle
#          settings-path: ${{ github.workspace }} # location for the settings.xml file
#
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@cc4fc85e6b35bafd578d5ffbc76a5518407e1af0 # v4.2.1
#
#      - name: Build with Gradle - skip test execution
#        run: ./gradlew :e2e-tests:build -x test
#
#        # Step 1: Run the Review Collector Docker Container
#      - name: Run Review Collector Docker Container
#        env:
#          AWS_ACCESSKEY: ${{ secrets.AWS_ACCESSKEY }}
#          AWS_SECRETKEY: ${{ secrets.AWS_SECRETKEY }}
#        run: |
#          docker run --rm -d -p 8080:8080 --name review-collector teixeirafernando/review-collector:latest
#          docker ps -a
#          REVIEW_COLLECTOR_BASE_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' review-collector)
#          echo "REVIEW_COLLECTOR_BASE_URL=$REVIEW_COLLECTOR_BASE_URL" >> $GITHUB_ENV
#
#        # Step 2: Run the Review Analyzer Docker Container
#      - name: Run Review Analyzer Docker container
#        env:
#          AWS_ACCESSKEY: ${{ secrets.AWS_ACCESSKEY }}
#          AWS_SECRETKEY: ${{ secrets.AWS_SECRETKEY }}
#        run: |
#          docker run --rm -d -p 8081:8081 --name review-analyzer teixeirafernando/review-analyzer:latest
#          docker ps -a
#          REVIEW_ANALYZER_BASE_URL=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' review-analyzer)
#          echo "REVIEW_ANALYZER_BASE_URL=$REVIEW_ANALYZER_BASE_URL" >> $GITHUB_ENV
#
#      - name: Run E2E tests
#        env:
#          REVIEW_COLLECTOR_BASE_URL: ${{ env.REVIEW_COLLECTOR_BASE_URL }}
#          REVIEW_ANALYZER_BASE_URL: ${{ env.REVIEW_ANALYZER_BASE_URL }}
#        run: |
#          echo "Container 1 IP: $REVIEW_COLLECTOR_BASE_URL"
#          echo "Container 2 IP: $REVIEW_ANALYZER_BASE_URL"
#          sleep 10
#          docker run --rm -e REVIEW_COLLECTOR_BASE_URL=$REVIEW_COLLECTOR_BASE_URL -e REVIEW_ANALYZER_BASE_URL=$REVIEW_ANALYZER_BASE_URL -v /var/run/docker.sock:/var/run/docker.sock teixeirafernando/review-analysis-e2e-tests
#
#      - name: Archive logs and test results
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: test-run-logs
#          path: e2e-tests/build/reports/**